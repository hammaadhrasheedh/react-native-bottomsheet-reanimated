{"version":3,"sources":["index.tsx"],"names":["Screen","width","Dimensions","get","height","Index","isBackDropDismissByPress","initialPosition","y","onChangeSnap","onChangeKeyboardAwareSnap","snapPoints","bottomSheerColor","backDropColor","isRoundBorderWithTipHeader","tipHeaderRadius","header","body","isBackDrop","isModal","dragEnabled","isAnimatedYFromParent","animatedValueY","containerStyle","bodyContainerStyle","tipStyle","headerStyle","bodyStyle","onClose","bounce","keyboardAware","keyboardAwareExtraSnapHeight","keyboardAwareDrag","overDrag","ref","keyboardHeight","headerHeight","setHeaderHeight","currentSnap","setCurrentSnap","currentNomalizeSnap","normalizeSnap","_deltaY","Animated","Value","bottomPanel","_snapPoints","boundaries","top","_initialPosition","isDismissWithPress","isBottomSheetDismissed","setIsBottomSheetDismissed","onDrawerSnap","snap","index","nativeEvent","value","dismissBottomSheet","findIndex","x","current","snapTo","Keyboard","dismiss","currentSnapHeight","newSnapHeight","snapToPosition","previousSnap","nextSnap","dragHandler","styles","panelContainer","backgroundColor","opacity","interpolate","inputRange","outputRange","extrapolateRight","Extrapolate","CLAMP","marginTop","modal","panel","shadowColor","shadowOffset","shadowRadius","shadowOpacity","borderTopLeftRadius","borderTopRightRadius","panelHandle","panelHeader","e","layout","React","cloneElement","style","props","StyleSheet","create","container","flex","position","alignSelf","borderRadius","marginVertical","padding","bottom","left","right"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n  useEffect,\n  useMemo,\n} from 'react';\n\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n  Keyboard,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport Animated, { Extrapolate } from 'react-native-reanimated';\nimport Interactable from 'react-native-interactable-reanimated';\nimport { TapGestureHandler } from 'react-native-gesture-handler';\nimport { useKeyboard } from './Hooks';\nimport {\n  normalize,\n  getSnapPoints,\n  getInitialPosition,\n  getOverDragBoundries,\n  getNormalizeSnaps,\n} from './utils';\n\nconst Screen = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height,\n};\ntype Porps = {\n  isBackDropDismissByPress: boolean;\n  initialPosition: object | any;\n  onChangeSnap: (data: object) => void;\n  onChangeKeyboardAwareSnap: (data: object) => void;\n  snapPoints: Array<any>;\n  bottomSheerColor: string;\n  backDropColor: string;\n  isRoundBorderWithTipHeader: boolean;\n  tipHeaderRadius: number;\n  header: React.ReactNode;\n  body: React.ReactNode | any;\n  isBackDrop: boolean;\n  isModal: boolean;\n  dragEnabled: boolean;\n  isAnimatedYFromParent: boolean;\n  animatedValueY: any;\n  containerStyle: StyleProp<ViewStyle>;\n  bodyContainerStyle: StyleProp<ViewStyle>;\n  tipStyle: StyleProp<ViewStyle>;\n  headerStyle: StyleProp<ViewStyle>;\n  bodyStyle: StyleProp<ViewStyle>;\n  onClose: () => void;\n  bounce: number;\n  keyboardAware?: boolean;\n  keyboardAwareExtraSnapHeight?: number;\n  keyboardAwareDrag?: boolean;\n  overDrag?: boolean;\n};\nconst Index = forwardRef(\n  (\n    {\n      isBackDropDismissByPress,\n      initialPosition = { y: 0 },\n      onChangeSnap,\n      onChangeKeyboardAwareSnap,\n      snapPoints,\n      bottomSheerColor = '#FFFFFF',\n      backDropColor = '#000000',\n      isRoundBorderWithTipHeader = false,\n      tipHeaderRadius = 12,\n      header,\n      body,\n      isBackDrop = false,\n      isModal,\n      dragEnabled = true,\n      isAnimatedYFromParent,\n      animatedValueY,\n      containerStyle,\n      bodyContainerStyle = {},\n      tipStyle,\n      headerStyle,\n      bodyStyle,\n      onClose,\n      bounce = 0.5,\n      keyboardAware = false,\n      keyboardAwareExtraSnapHeight = 0,\n      keyboardAwareDrag = false,\n      overDrag = true,\n    }: Porps,\n    ref\n  ) => {\n    const [keyboardHeight] = useKeyboard(keyboardAware);\n    const [headerHeight, setHeaderHeight] = useState(0);\n    const [currentSnap, setCurrentSnap] = useState(initialPosition);\n    const currentNomalizeSnap = useMemo(() => normalize(currentSnap), [\n      currentSnap,\n    ]);\n    const normalizeSnap = useMemo(() => getNormalizeSnaps(snapPoints), [\n      snapPoints,\n    ]);\n    const [_deltaY] = useState(new Animated.Value(Screen.height));\n    const bottomPanel = useRef<any>();\n    const _snapPoints = useMemo(() => getSnapPoints(normalizeSnap), [\n      normalizeSnap,\n    ]);\n    const boundaries = useMemo(\n      () =>\n        overDrag\n          ? { top: isModal ? 0 : -300, bounce: bounce }\n          : getOverDragBoundries(normalizeSnap),\n      [overDrag, isModal, bounce, normalizeSnap]\n    );\n    const _initialPosition = useMemo(\n      () => getInitialPosition(initialPosition),\n      [initialPosition]\n    );\n    const isDismissWithPress = isBackDropDismissByPress\n      ? isBackDropDismissByPress\n      : false;\n    const [\n      isBottomSheetDismissed,\n      setIsBottomSheetDismissed,\n    ] = useState<boolean>(initialPosition === 0 || initialPosition === '0%');\n\n    const onDrawerSnap = (snap: any) => {\n      const index = snap.nativeEvent.index;\n      const value = snapPoints[index];\n      setCurrentSnap(value); //\n      if (value === 0 || value === '0%') {\n        setIsBottomSheetDismissed(true);\n        onClose && onClose();\n      } else {\n        setIsBottomSheetDismissed(false);\n      }\n      onChangeSnap && onChangeSnap({ index, value });\n    };\n\n    const dismissBottomSheet = () => {\n      let index = snapPoints.findIndex(\n        (x: number | string) => x === 0 || x === '0%'\n      );\n      if (index !== -1) {\n        bottomPanel.current.snapTo({ index });\n        onClose && onClose();\n      }\n      Keyboard.dismiss();\n    };\n\n    const snapTo = (index: number) => {\n      if (snapPoints.findIndex((x) => x === 0 || x === '0%') !== -1) {\n        Keyboard.dismiss();\n      }\n      bottomPanel.current.snapTo({ index });\n      const value = snapPoints[index];\n      onChangeSnap && onChangeSnap({ index, value });\n    };\n\n    useImperativeHandle(ref, () => ({\n      snapTo,\n      dismissBottomSheet,\n    }));\n\n    useEffect(() => {\n      if (keyboardAware) {\n        const currentSnapHeight = normalize(currentSnap);\n        if (keyboardHeight) {\n          const newSnapHeight = currentSnapHeight + keyboardHeight;\n          if (newSnapHeight > Screen.height) {\n            bottomPanel.current.snapToPosition({\n              x: 0,\n              y: 0 - keyboardAwareExtraSnapHeight,\n            });\n            onChangeKeyboardAwareSnap &&\n              onChangeKeyboardAwareSnap({\n                previousSnap: currentSnapHeight,\n                nextSnap: 0,\n                keyboardHeight,\n              });\n          } else {\n            bottomPanel.current.snapToPosition({\n              x: 0,\n              y: Screen.height - newSnapHeight - keyboardAwareExtraSnapHeight,\n            });\n            onChangeKeyboardAwareSnap &&\n              onChangeKeyboardAwareSnap({\n                previousSnap: currentSnapHeight,\n                nextSnap: newSnapHeight,\n                keyboardHeight,\n              });\n          }\n        } else {\n          bottomPanel.current.snapToPosition({\n            x: 0,\n            y: Screen.height - currentSnapHeight,\n          });\n        }\n      }\n    }, [keyboardHeight]);\n\n    const dragHandler = () => {\n      if (dragEnabled) {\n        if (!keyboardAwareDrag && keyboardHeight > 0) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    return (\n      <View style={styles.panelContainer} pointerEvents={'box-none'}>\n        {/* Backdrop */}\n        {isBackDrop && (\n          <Animated.View\n            pointerEvents={!isBottomSheetDismissed ? 'auto' : 'box-none'}\n            style={[\n              styles.panelContainer,\n              {\n                backgroundColor: backDropColor,\n                opacity: isAnimatedYFromParent\n                  ? animatedValueY.interpolate({\n                      inputRange: [0, Screen.height - 100],\n                      outputRange: [1, 0],\n                      extrapolateRight: Extrapolate.CLAMP,\n                    })\n                  : _deltaY.interpolate({\n                      inputRange: [0, Screen.height - 100],\n                      outputRange: [1, 0],\n                      extrapolateRight: Extrapolate.CLAMP,\n                    }),\n              },\n            ]}\n          />\n        )}\n\n        <Interactable.View\n          dragEnabled={isModal ? false : dragHandler()}\n          verticalOnly={true}\n          ref={bottomPanel}\n          snapPoints={_snapPoints}\n          initialPosition={_initialPosition}\n          boundaries={boundaries}\n          animatedValueY={isAnimatedYFromParent ? animatedValueY : _deltaY}\n          onSnap={onDrawerSnap}\n        >\n          {!isModal && isDismissWithPress && !isBottomSheetDismissed && (\n            <TapGestureHandler\n              enabled={isBackDrop}\n              onActivated={dismissBottomSheet}\n            >\n              <View\n                style={{\n                  height: Screen.height,\n                  marginTop: -Screen.height,\n                }}\n              />\n            </TapGestureHandler>\n          )}\n\n          <View\n            style={[\n              isModal ? styles.modal : styles.panel,\n              { backgroundColor: bottomSheerColor },\n              isRoundBorderWithTipHeader\n                ? [\n                    {\n                      backgroundColor: '#f7f5eee8',\n                      shadowColor: '#000000',\n                      shadowOffset: { width: 0, height: 0 },\n                      shadowRadius: 5,\n                      shadowOpacity: 0.4,\n                    },\n                    {\n                      borderTopLeftRadius: tipHeaderRadius,\n                      borderTopRightRadius: tipHeaderRadius,\n                    },\n                  ]\n                : {},\n              containerStyle,\n            ]}\n          >\n            <View\n              style={[\n                isModal ? styles.modal : styles.panel,\n                bodyContainerStyle,\n              ]}\n            >\n              {!isModal && isRoundBorderWithTipHeader && (\n                <View style={[styles.panelHandle, tipStyle]} />\n              )}\n              {!isModal && (\n                <View\n                  style={[styles.panelHeader, headerStyle]}\n                  onLayout={(e) => setHeaderHeight(e.nativeEvent.layout.height)}\n                >\n                  {header}\n                </View>\n              )}\n              <View style={bodyStyle}>\n                {React.cloneElement(body, {\n                  style: {\n                    ...body?.props?.style,\n                    height: currentNomalizeSnap - headerHeight,\n                  },\n                })}\n              </View>\n            </View>\n          </View>\n        </Interactable.View>\n      </View>\n    );\n  }\n);\n\nexport default Index;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  panelHandle: {\n    position: 'absolute',\n    alignSelf: 'center',\n    width: 40,\n    height: 6,\n    borderRadius: 4,\n    backgroundColor: '#00000040',\n    marginVertical: 8,\n  },\n  panel: {\n    height: Screen.height + 300,\n  },\n  modal: {\n    height: Screen.height + 300,\n  },\n  panelHeader: {\n    padding: 16,\n  },\n  panelContainer: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}